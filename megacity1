#include <iostream>
#include <sys/time.h>
using namespace std;

typedef long long ll;
const ll DEFAULT = 10;
const ll MAX_COST = 2000000000LL;
const int MAX_SIZE = 2002 * 2002;

ll heap_v[MAX_SIZE];
int heap_l[MAX_SIZE];
int heap_a[MAX_SIZE];
int heap_size = 0;
ll dist[MAX_SIZE];


inline void hswap(int pos1, int pos2) {
    ll temp = heap_v[pos1];
    heap_v[pos1] = heap_v[pos2];
    heap_v[pos2] = temp;
    int temp2 = heap_l[pos1];
    heap_l[pos1] = heap_l[pos2];
    heap_l[pos2] = temp2;
    heap_a[heap_l[pos1]] = pos1;
    heap_a[heap_l[pos2]] = pos2;
}

inline void insert(ll v, int loc) {
    if(heap_a[loc] < 0) {
        heap_v[heap_size] = v;
        heap_l[heap_size] = loc;
        heap_a[loc] = heap_size;
        heap_size++;
    } else {
        heap_v[heap_a[loc]] = v;
    }
    
    int current = heap_a[loc];
    int parent = (int)(current-1)/2;
    while(current > 0 && heap_v[current] < heap_v[parent]) {
        hswap(current, parent);
        current = parent;
        parent = (int)(current-1)/2;
    }
}

inline void remove() {
    if(heap_size == 0 ) return;
    heap_size--;
    int current = 0;
    int left = 1;
    int right = 2;
    heap_a[current] = -1;
    hswap(current, heap_size);
    int select = 0;
    while(true) {
        // leaf node
        if(left >= heap_size) break;
        if(right >= heap_size) {
            select = left;
        } else {
            if(heap_v[left] < heap_v[right]) select = left;
            else select = right;
        }
        if(heap_v[select] >= heap_v[current]) break;
        
        hswap(current, select);
        current = select;
        left = current * 2 + 1;
        right = current * 2 + 2;
    }
}

void Sort(int arr[], int left, int right) {
    int l, r, pivot;
    int temp;
    if(left < right) {
        l = left;
        r = right;
        pivot = l;
        while(l < r) {
            while(arr[l] <= arr[pivot] && l <= right) l++;
            while(arr[pivot] < arr[r] && left <= r) r--;
            if(l < r) {
                temp = arr[l];
                arr[l] = arr[r];
                arr[r] = temp;
            }
        }
        temp = arr[pivot];
        arr[pivot] = arr[r];
        arr[r] = temp;
        Sort(arr, left, r-1);
        Sort(arr, r+1, right);
    }
}

int searchID(int arr[], int num, int left, int right) {
    while(left <= right) {
        int mid = (left + right) / 2;
        if(arr[mid] == num) {
            return mid;
        } else if(arr[mid] < num) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return -1;
}

int main() {
    freopen("/Users/shinchulwoo/Documents/Megacity2/Megacity2/input", "r", stdin);
    struct timeval tp;
    gettimeofday(&tp, NULL);
    long int ms = tp.tv_sec * 1000 + tp.tv_usec / 1000;
    
    int ax, ay, bx, by, n;
    cin >> ax >> ay >> bx >> by;
    cin >> n;
    int lx, ly, hx, hy, c;
    int x1[1000], y1[1000], x2[1000], y2[1000];
    ll cost[1000];
    for(int i=0; i<n; i++) {
        cin >> lx >> ly >> hx >> hy >> c;
        x1[i] = lx;
        y1[i] = ly;
        x2[i] = hx;
        y2[i] = hy;
        cost[i] = c;
    }
    int xl[2002], yl[2002], x_idx = 0, y_idx = 0;
    xl[x_idx++] = ax; xl[x_idx++] = bx;
    yl[y_idx++] = ay; yl[y_idx++] = by;
    for(int i=0; i<n; i++) {
        xl[x_idx++] = x1[i]; yl[y_idx++] = y1[i];
        xl[x_idx++] = x2[i]; yl[y_idx++] = y2[i];
    }
    Sort(xl, 0, x_idx-1);
    Sort(yl, 0, y_idx-1);
    
    int x_id = 1, y_id = 1;
    int sx[2002], sy[2002];
    sx[0] = xl[0];
    sy[0] = yl[0];
    for(unsigned int i=1; i<x_idx; i++) {
        if(xl[i-1] != xl[i]) sx[x_id++] = xl[i];
        if(yl[i-1] != yl[i]) sy[y_id++] = yl[i];
    }
    
    int w = x_id;
    int h = y_id;
    int b_size = x_id * y_id;
    ll* horizontal = new ll[b_size];
    ll* vertical = new ll[b_size];
    for(int x=0; x<w; x++) {
        for(int y=0; y<h-1; y++) {
            vertical[x*h + y] = (sy[y+1] - sy[y]) * DEFAULT;
        }
    }
    for(int x=0; x<w-1; x++) {
        for(int y=0; y<h; y++) {
            horizontal[x*h+y] = (sx[x+1] - sx[x]) * DEFAULT;
        }
    }
    
    for(int i=0; i<w; i++) {
        for(int j=0; j<h; j++) {
            if(vertical[i*h + j] < 0 )
                cout << vertical[i*h + j];
            if(horizontal[i*h + j] < 0 )
                cout << horizontal[i*h + j];
        }
    }
    
    for(int i=0; i<n; i++) {
        int x1_id = searchID(sx, x1[i], 0, w-1);
        int y1_id = searchID(sy, y1[i], 0, h-1);
        int x2_id = searchID(sx, x2[i], 0, w-1);
        int y2_id = searchID(sy, y2[i], 0, h-1);
        for (int x = x1_id + 1; x < x2_id; ++x) {
            for (int y = y1_id; y < y2_id; ++y) {
                vertical[x*h + y] = (sy[y + 1] - sy[y]) * cost[i];
            }
        }
        for (int x = x1_id; x < x2_id; ++x) {
            for (int y = y1_id + 1; y < y2_id; ++y) {
                horizontal[x*h + y] = (sx[x + 1] - sx[x]) * cost[i];
            }
        }
    }
    
    
    int src = searchID(sx, ax, 0, w-1) * h + searchID(sy, ay, 0, h-1);
    int dst = searchID(sx, bx, 0, w-1) * h + searchID(sy, by, 0, h-1);
    for(int i=0; i<b_size; i++) {
        heap_a[i] = -1;
        dist[i] = MAX_COST;
    }
    heap_v[0] = 0;
    heap_l[0] = src;
    heap_a[src] = 0;
    heap_size = 1;
    dist[src] = 0;
    
    while(true) {
        int here = heap_l[0];
        ll cost = heap_v[0];
        if(here == dst) break;
        remove();
        
        int h_x = here / h;
        int h_y = here % h;
        if(h_x < w - 1) {
            ll n_cost = horizontal[here] + cost;
            if(dist[here+h] > n_cost) {
                insert(n_cost, here + h);
                dist[here+h] = n_cost;
            }
        }
        if(h_x > 0) {
            ll n_cost = horizontal[here - h] + cost;
            if(dist[here-h] > n_cost){
                insert(n_cost, here - h);
                dist[here-h] = n_cost;
            }
        }
        if(h_y < h - 1) {
            ll n_cost = vertical[here] + cost;
            if(dist[here+1] > n_cost) {
                insert(n_cost, here + 1);
                dist[here+1] = n_cost;
            }
        }
        if(h_y > 0) {
            ll n_cost = vertical[here - 1] + cost;
            if(dist[here-1] > n_cost) {
                insert(n_cost, here - 1);
                dist[here-1] = n_cost;
            }
        }
    }
    cout << dist[dst] << endl;
    
    struct timeval tp2;
    gettimeofday(&tp2, NULL);
    long int ms2 = tp2.tv_sec * 1000 + tp2.tv_usec / 1000;
    cout << ms2 - ms << endl;
    
    return 0;
}
