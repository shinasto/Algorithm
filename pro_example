1 <- TC 수
7 2 <- N, K
1 2 <- N-1 개의 교차로 연결 정보
2 6
2 3
5 2
4 7
4 1
1001110

#1 21 


import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.StringTokenizer;
 
public class SWPro20170603 {
    public static void main(String[] args) throws Exception {
        System.setIn(new FileInputStream(new File("input/sample_input_bt_100000_100.txt")));
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        //Scanner scanner = new Scanner(System.in);
         
        long curTime = System.currentTimeMillis();
         
        int T = Integer.parseInt(reader.readLine());
        for (int i = 1; i <= T; i++) {
         
            StringTokenizer st = new StringTokenizer(reader.readLine());
            int N = Integer.parseInt(st.nextToken());  // 1 <= N <= 100000
            int K = Integer.parseInt(st.nextToken());  // 0 <= K <= 100
             
            Node[] nodes = new Node[N];
            for (int n = 0; n < N-1; n++) {
                st = new StringTokenizer(reader.readLine());
                Node n1 = getNode(nodes, Integer.parseInt(st.nextToken()));
                Node n2 = getNode(nodes, Integer.parseInt(st.nextToken()));
                 
                n1.nexts.add(n2.idx);
                n2.nexts.add(n1.idx);
            }
             
            String criminals = reader.readLine();
            for (int n = 0; n < N; n++) {
                nodes[n].criminal = Integer.parseInt(String.valueOf(criminals.charAt(n)));
            }
             
            // 모든 트리 노드가 상태 트리 깊이 별 자식 노드들의 범죄자 수를 가지도록 구성
            // e.g. 임의의 노드에서 K=2 인 경우, 자식 노드들의 범죄자 수를 바로 조회할 수 있음
            Stack<CallStack> stack = new Stack<CallStack>();
            stack.add(new CallStack(nodes[0].idx, 0, -1));
            while (!stack.isEmpty()) {
                CallStack cur = stack.peek();
                 
                Node node = nodes[cur.idx-1];
                 
                if (cur.traverseCnt > 0) {
                    if (cur.ref >= 0) {
                        Node parent = nodes[cur.ref-1];
                         
                        node.parent = parent.idx;
                        for (int k=0; k<100; k++) {
                            parent.K[k+1] += node.K[k];
                        }
                    }
                     
                    // 상대 트리 깊이 별 범죄자 수 누적 계산
                    for (int k=0; k<100; k++) {
                        node.K[k+1] += node.K[k];
                    }
                     
                    stack.pop();
                    continue;
                }
                 
                node.K[0] += node.criminal;
                if (!node.nexts.isEmpty()) {
                    for (int childIdx : node.nexts) {
                        if (childIdx == cur.ref) {
                            continue;
                        }
                         
                        node.addChild(childIdx);
                        stack.add(new CallStack(childIdx, cur.treeLevel+1, cur.idx));
                    }
                }
                 
                node.treeLevel = cur.treeLevel;
                cur.traverseCnt++;
            }
             
            long total = 0;
            for (int n = 0; n < N; n++) {
                Node node = nodes[n];
                 
                int k = K;
                 
                Node child = node;;
                Node parent = null;
                // move up (to parent)
                while (k > 0) {
                    if (child.parent < 0) {
                        break;
                    }
                     
                    k--;
                    parent = nodes[child.parent-1];
                    long subTotal = parent.K[k];
                    if (k > 0) {
                        subTotal -= child.K[k-1];
                    }
                     
                    total += subTotal;
                    child = parent;
                }
                 
                total += node.K[K];
            }
            System.out.println(String.format("#%s %s", i, total));
        }
        System.out.println(String.format("%s msec", System.currentTimeMillis() - curTime));
    }
     
    public static class CallStack {
        int idx;
        int ref;
        int treeLevel;
        int traverseCnt;
         
        public CallStack(int idx, int treeLevel, int ref) {
            this.idx = idx;
            this.treeLevel = treeLevel;
            this.ref = ref;
        }
    }
     
    public static class Node {
        int idx;
        int criminal = 0;
        List<Integer> nexts = new ArrayList<Integer>(2);
         
        int[] K = new int[101];
        int treeLevel = 0;
         
        int parent = -1;
        List<Integer> children;
         
        public Node(int idx) {
            this.idx = idx;
        }
         
        public void addChild(Integer childIdx) {
            if (children == null) {
                children = new ArrayList<Integer>(2);
            }
            children.add(childIdx);
        }
    }
     
    public static Node getNode(Node[] nodes, int idx) {
        Node node = nodes[idx-1];
        if (node == null) {
            node = nodes[idx-1] = new Node(idx);
        }
        return node;
    }
}
